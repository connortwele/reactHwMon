{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","hoc/Rainbow.js","components/Contact.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","Home","state","posts","axios","get","then","res","setState","data","slice","this","postList","length","map","post","key","id","src","Pokeball","alt","title","body","Component","Rainbow","WrappedComponent","Math","floor","random","props","Contact","Post","match","params","post_id","class","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,sC,mLCmB5BC,EAhBA,WACX,OACI,yBAAKC,UAAU,4BACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,cAAb,cACA,wBAAIA,UAAU,SACV,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,gB,yCCgCTC,E,4MApCXC,MAAQ,CACJC,MAAM,I,kEAEM,IAAD,OACfC,IAAMC,IAAI,8CACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACL,MAAOI,EAAIE,KAAKC,MAAM,EAAE,W,+BAG1C,IACEP,EAASQ,KAAKT,MAAdC,MACDS,EAAWT,EAAMU,OAAUV,EAAMW,KAAI,SAAAC,GACvC,OACI,yBAAKhB,UAAU,YAAYiB,IAAKD,EAAKE,IACjC,yBAAKC,IAAMC,IAAWC,IAAI,aAC1B,yBAAKrB,UAAW,gBACZ,kBAAC,IAAD,CAAMC,GAAK,IAAMe,EAAKE,IAClB,0BAAMlB,UAAU,cAAcgB,EAAKM,QAEvC,2BAAIN,EAAKO,WAKrB,yBAAKvB,UAAU,UAAf,kBAEJ,OACI,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,UAAd,aACA,2BAAIa,Q,GA9BGW,aCMJC,ECVC,SAACC,GAEb,IAEM1B,EAFQ,CAAC,MAAM,OAAO,SAAS,OAAO,QAAQ,UACzB2B,KAAKC,MAAsB,EAAhBD,KAAKE,WACX,QAEhC,OAAM,SAACC,GACH,OACI,yBAAK9B,UAAWA,GACZ,kBAAC0B,EAAqBI,KDCvBL,EATF,WACT,OACI,yBAAKzB,UAAU,aACX,wBAAIA,UAAU,UAAd,cACA,iKEOG+B,EAZA,SAACD,GAIZ,OACI,yBAAK9B,UAAU,aACX,wBAAIA,UAAU,UAAd,gBACA,+JC4BGgC,E,4MAjCX7B,MAAM,CACFa,KAAM,M,kEAEU,IAAD,OACXE,EAAKN,KAAKkB,MAAMG,MAAMC,OAAOC,QACjC9B,IAAMC,IAAI,8CAAgDY,GACrDX,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVO,KAAMR,EAAIE,UAGtBE,KAAKH,SAAS,CACVS,GAAGA,M,+BAIP,IAAMF,EAAOJ,KAAKT,MAAMa,KACpB,yBAAKhB,UAAU,QACX,wBAAIA,UAAU,UAAUY,KAAKT,MAAMa,KAAKM,OACxC,2BAAIV,KAAKT,MAAMa,KAAKO,OAGxB,yBAAKvB,UAAU,UAAf,oBAGJ,OACI,yBAAKoC,MAAM,aACP,4BAAMpB,Q,GA5BHQ,aCwBJa,E,uKAjBb,OACE,kBAAC,IAAD,KACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,IAAIC,UAAYtC,IAClC,kBAAC,IAAD,CAAOqC,KAAK,SAASC,UAAYC,IACjC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAYT,IACnC,kBAAC,IAAD,CAAOQ,KAAK,YAAYC,UAAWR,W,GAV3BR,aCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCZNa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a53af1fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react'\nimport {Link, Navlink} from 'react-router-dom'\n\nconst Navbar = ()=>{\n    return(\n        <nav className='nav-wrapper red darken-3'>\n            <div className=\"container\">\n                <a className=\"brand-logo\">Poke Times</a>\n                <ul className=\"right\">\n                    <li><Link to=\"/\">Home</Link></li>\n                    <li><Link to=\"/about\">About</Link></li>\n                    <li><Link to=\"/contact\">Contact</Link></li>\n                </ul>\n            </div>\n\n        </nav>\n    )\n}\n\nexport default Navbar;","import React, {Component} from 'react';\nimport axios from 'axios'\nimport {Link} from \"react-router-dom\"\nimport Pokeball from '../pokeball.png'\n\n\nclass Home extends Component{\n    state = {\n        posts:[ ]\n    }\ncomponentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then(res=>{\n            this.setState({posts: res.data.slice(0,10)})\n        })\n}\nrender(){\n    const {posts} = this.state;\n    const postList = posts.length ? (posts.map(post=>{\n        return (\n            <div className=\"post card\" key={post.id}>\n                <img src={ Pokeball } alt=\"pokeball\"/>\n                <div className =\"card-content\">\n                    <Link to= {'/' + post.id}>\n                        <span className=\"card-title\">{post.title}</span>\n                    </Link>\n                    <p>{post.body}</p>\n                </div>\n            </div>\n        )\n    })) : (\n        <div className=\"center\"> No posts yet </div>\n    )\n    return(\n        <div className=\"container home\">\n            <h4 className=\"center\">Home Page</h4>\n            <p>{postList}</p>\n        </div>\n    )\n}\n}\n\n\nexport default Home;","import React from 'react';\nimport Rainbow from '../hoc/Rainbow'\n\nconst About =()=>{\n    return(\n        <div className=\"container\">\n            <h4 className=\"center\">About Page</h4>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras id massa ac nisl laoreet viverra. Nam ultrices enim finibus dui.</p>\n        </div>\n    )\n}\n\nexport default Rainbow(About);","import React from 'react'\n\nconst Rainbow = (WrappedComponent) =>{\n    \n    const colors =['red','pink','orange','blue','green','yellow']\n    const randomColor = colors[Math.floor(Math.random() * 6)];\n    const className = randomColor + '-text'\n    \n    return(props) => {\n        return (\n            <div className={className}>\n                <WrappedComponent {...props}/>\n            </div>\n        )\n    }\n}\n\nexport default Rainbow;","import React from 'react';\n\nconst Contact =(props)=>{\n    // setTimeout(()=>{\n    // props.history.push('/about')},2000\n    // );\n    return(\n        <div className=\"container\">\n            <h4 className=\"center\">Contact Page</h4>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras id massa ac nisl laoreet viverra. Nam ultrices enim finibus dui.</p>\n        </div>\n    )\n}\n\nexport default Contact;","import React, {Component} from 'react'\nimport axios from 'axios'\n\nclass Post extends Component{\n    state={\n        post: null\n    }\n    componentDidMount(){\n        let id = this.props.match.params.post_id;\n        axios.get('https://jsonplaceholder.typicode.com/posts/' + id)\n            .then(res =>{\n                this.setState({\n                    post: res.data\n                })\n            })\n        this.setState({\n            id:id\n        })\n    }\n    render(){\n        const post = this.state.post ? (\n            <div className=\"post\">\n                <h4 className=\"center\">{this.state.post.title}</h4>\n                <p>{this.state.post.body}</p>\n            </div>\n        ):(\n            <div className=\"center\"> Loading post...</div>\n        )\n\n        return(\n            <div class=\"container\">\n                <h4>{ post }</h4>\n            </div>\n        )\n    }\n}\n\nexport default Post","import React, {Component} from 'react';\nimport Navbar from './components/Navbar'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Home from './components/Home'\nimport About from './components/About'\nimport Contact from './components/Contact'\nimport Post from './components/Post'\n\nclass App extends Component{\nrender() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component ={Home}/>\n          <Route path=\"/about\" component ={About}/>\n          <Route path=\"/contact\" component ={Contact}/>\n          <Route path=\"/:post_id\" component={Post}/>\n        </Switch>\n\n      </div>\n    </BrowserRouter>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}